# -*- coding: utf-8 -*-
#
#     ||          ____  _ __
#  +------+      / __ )(_) /_______________ _____  ___
#  | 0xBC |     / __  / / __/ ___/ ___/ __ `/_  / / _ \
#  +------+    / /_/ / / /_/ /__/ /  / /_/ / / /_/  __/
#   ||  ||    /_____/_/\__/\___/_/   \__,_/ /___/\___/

"""
2 circles
"""
import logging
import time
import threading


import numpy as np
import cv2
import cv2.aruco as aruco
import glob

import time
import math

WAIT_TIME = 100
from picamera import PiCamera




import cflib.crtp
from cflib.crazyflie import Crazyflie
from cflib.crazyflie.syncCrazyflie import SyncCrazyflie
from cflib.positioning.motion_commander import MotionCommander

from cflib.crazyflie.log import LogConfig
from cflib.crazyflie.mem import MemoryElement
from cflib.crazyflie.mem import Poly4D
from cflib.crazyflie.syncCrazyflie import SyncCrazyflie
from cflib.crazyflie.syncLogger import SyncLogger


circle_trajectory_yaw4 = [
( 1.5,0.95,0.21,0 ),
( 1.5,0.95,0.24,0 ),
( 1.5,0.95,0.27,0 ),
( 1.5,0.95,0.30000000000000004,0 ),
( 1.5,0.95,0.33000000000000007,0 ),
( 1.5,0.95,0.3600000000000001,0 ),
( 1.5,0.95,0.3900000000000001,0 ),
( 1.5,0.95,0.42000000000000015,0 ),
( 1.5,0.95,0.4500000000000002,0 ),
( 1.5,0.95,0.4800000000000002,0 ),
( 1.5,0.95,0.5100000000000002,0 ),
( 1.5,0.95,0.5400000000000003,0 ),
( 1.5,0.95,0.5700000000000003,0 ),
( 1.5,0.95,0.6000000000000003,0 ),
( 1.5,0.95,0.6300000000000003,0 ),
( 1.5,0.95,0.6600000000000004,0 ),
( 1.5,0.95,0.6900000000000004,0 ),
( 1.5,0.95,0.7200000000000004,0 ),
( 1.5,0.95,0.7500000000000004,0 ),
( 1.5,0.95,0.7800000000000005,0 ),
( 1.5,0.95,0.8100000000000005,0 ),
( 1.5,0.95,0.8400000000000005,0 ),
( 1.5,0.95,0.8700000000000006,0 ),
( 1.5,0.95,0.9000000000000006,0 ),
( 1.5,0.95,0.9300000000000006,0 ),
( 1.5,0.95,0.9600000000000006,0 ),
( 1.5,0.95,0.9900000000000007,0 ),
( 1.5,0.95,1.0200000000000007,0 ),
( 1.5,0.95,1.0500000000000007,0 ),
( 1.5,0.95,1.0800000000000007,0 ),
( 1.5,0.95,1.1100000000000008,0 ),
( 1.5,0.95,1.1400000000000008,0 ),
( 1.5,0.95,1.1700000000000008,0 ),
( 1.5,0.95,1.2000000000000008,0 ),
( 1.5,0.95,1.2300000000000009,0 ),
( 1.5,0.95,1.260000000000001,0 ),
( 1.5,0.95,1.290000000000001,0 ),
( 1.5,0.95,1.320000000000001,0 ),
( 1.5,0.95,1.350000000000001,0 ),
( 1.5,0.95,1.380000000000001,0 ),
( 1.5,0.95,1.410000000000001,0 ),
( 1.5,0.95,1.440000000000001,0 ),
( 1.5,0.95,1.470000000000001,0 ),
( 1.5,0.95,1.500000000000001,0 ),
( 1.5,0.95,1.5300000000000011,0 ),
( 1.5,0.95,1.5600000000000012,0 ),
( 1.5,0.95,1.5900000000000012,0 ),
( 1.5,0.95,1.6200000000000012,0 ),
( 1.5,0.95,1.6500000000000012,0 ),
( 1.5,0.95,1.6500000000000012,0 ),
( 1.5,0.95,1.6500000000000012,0 ),
( 1.5,0.95,1.6500000000000012,0 ),
( 1.5,0.95,1.6500000000000012,0 ),
( 1.5,0.95,1.6500000000000012,0 ),
( 1.5,0.95,1.6500000000000012,0 ),
( 1.5,0.95,1.6500000000000012,0 ),
( 1.5,0.95,1.6500000000000012,0 ),
( 1.5,0.95,1.6500000000000012,0 ),


( 1.5,0.95,1.646,0.0 ),
( 1.545959838040747,0.95100634258959,1.642,2.508710801393725 ),
( 1.5918315782863874,0.9540234413575841,1.638,5.017421602787462 ),
( 1.6375272918114583,0.9590455129992446,1.634,7.526132404181187 ),
( 1.6829593871060895,0.9660629309915598,1.63,10.034843205574912 ),
( 1.7280407779751774,0.9750622440457783,1.626,12.543554006968636 ),
( 1.772685050468952,0.9860262018914172,1.6219999999999999,15.052264808362374 ),
( 1.816806628524952,0.9989337883423228,1.6179999999999999,17.5609756097561 ),
( 1.860320938003906,1.0137602615814016,1.6139999999999999,20.069686411149824 ),
( 1.9031445688050808,1.0304772015867982,1.6099999999999999,22.578397212543564 ),
( 1.9451954347503493,1.0490525646086175,1.6059999999999999,25.087108013937286 ),
( 1.9863929309305124,1.0694507445917623,1.6019999999999999,27.59581881533101 ),
( 2.0266580882122547,1.091632641427152,1.5979999999999999,30.104529616724747 ),
( 2.065913724609578,1.1155557359004948,1.5939999999999999,32.61324041811846 ),
( 2.104084593229552,1.1411741711949466,1.5899999999999999,35.1219512195122 ),
( 2.1410975265087977,1.1684388407914297,1.5859999999999999,37.63066202090592 ),
( 2.1768815764642215,1.1972974825981233,1.5819999999999999,40.139372822299656 ),
( 2.21136815068916,1.227694779128689,1.5779999999999998,42.64808362369339 ),
( 2.2444911438342574,1.259572463537208,1.5739999999999998,45.15679442508711 ),
( 2.2761870643210442,1.2928694313065803,1.5699999999999998,47.66550522648084 ),
( 2.306395156045326,1.3275218573762904,1.5659999999999998,50.174216027874564 ),
( 2.335057514837098,1.3634633184850302,1.5619999999999998,52.6829268292683 ),
( 2.36211919945375,1.400624920493665,1.5579999999999998,55.19163763066202 ),
( 2.3875283368938045,1.438935430444483,1.5539999999999998,57.70034843205575 ),
( 2.4112362218293177,1.4783214131035942,1.5499999999999998,60.20905923344949 ),
( 2.433197409966347,1.5187073717247455,1.5459999999999998,62.71777003484321 ),
( 2.453369805154529,1.560015892764733,1.5419999999999998,65.22648083623693 ),
( 2.4717147400787955,1.6021677942730135,1.5379999999999998,67.73519163763068 ),
( 2.48819705037854,1.6450822776710723,1.5339999999999998,70.2439024390244 ),
( 2.5027851420521827,1.6886770826306166,1.5299999999999998,72.75261324041811 ),
( 2.5154510520179105,1.7328686447537116,1.5259999999999998,75.26132404181185 ),
( 2.5261705017145153,1.7775722557526155,1.5219999999999998,77.77003484320558 ),
( 2.534922943639584,1.8227022258222667,1.5179999999999998,80.27874564459931 ),
( 2.5416916007358363,1.8681720478941932,1.5139999999999998,82.78745644599303 ),
( 2.5464634985501102,1.9138945634569822,1.5099999999999998,85.29616724738678 ),
( 2.5492294901033503,1.959782129625463,1.5059999999999998,87.80487804878048 ),
( 2.549984273423934,2.005746787138364,1.5019999999999998,90.31358885017421 ),
( 2.5487264017107147,2.0517004289624063,1.4979999999999998,92.82229965156795 ),
( 2.545458286106316,2.097554969179659,1.4939999999999998,95.33101045296168 ),
( 2.5401861910753487,2.143222511834413,1.4899999999999998,97.83972125435541 ),
( 2.532920222396414,2.1886155194159342,1.4859999999999998,100.34843205574913 ),
( 2.5236743077909147,2.2336469806541306,1.4819999999999998,102.85714285714288 ),
( 2.5124661702257978,2.278230577306495,1.4779999999999998,105.3658536585366 ),
( 2.49931729394141,2.3222808496166314,1.4739999999999998,107.87456445993033 ),
( 2.4842528832695794,2.36571336012719,1.4699999999999998,110.38327526132404 ),
( 2.4673018143208707,2.4084448555332187,1.4659999999999997,112.89198606271778 ),
( 2.448496579633612,2.450393426265681,1.4619999999999997,115.4006968641115 ),
( 2.427873225890799,2.491478663499244,1.4579999999999997,117.90940766550523 ),
( 2.405471284824263,2.53162181328337,1.4539999999999997,120.41811846689897 ),
( 2.3813336974385475,2.5707459275012825,1.4499999999999997,122.92682926829269 ),
( 2.3555067316997396,2.608776011367424,1.4459999999999997,125.43554006968643 ),
( 2.328039893847045,2.64563916718069,1.4419999999999997,127.94425087108016 ),
( 2.298985833497097,2.6812647340578764,1.4379999999999997,130.45296167247386 ),
( 2.2684002427229064,2.7155844233795046,1.4339999999999997,132.96167247386762 ),
( 2.2363417493009,2.7485324496883825,1.4299999999999997,135.47038327526136 ),
( 2.202871804330675,2.7800456567899996,1.4259999999999997,137.97909407665506 ),
( 2.1680545644428877,2.81006363881304,1.4219999999999997,140.4878048780488 ),
( 2.1319567688210643,2.8385288559979553,1.4179999999999997,142.99651567944252 ),
( 2.094647611273061,2.8653867449916497,1.4139999999999997,145.50522648083623 ),
( 2.0561986075973966,2.890585823436864,1.4099999999999997,148.01393728223 ),
( 2.016683458498693,2.9140777886557743,1.4059999999999997,150.5226480836237 ),
( 1.9761779083149902,2.935817610238641,1.4019999999999997,153.03135888501743 ),
( 1.9347595998277458,2.9557636163600383,1.3979999999999997,155.54006968641116 ),
( 1.8925079254328072,2.9738775736571994,1.3939999999999997,158.04878048780486 ),
( 1.8495038749576498,2.990124760517374,1.3899999999999997,160.55749128919862 ),
( 1.8058298804165935,3.0044740336337084,1.3859999999999997,163.06620209059236 ),
( 1.7615696580015716,3.0168978877020747,1.3819999999999997,165.57491289198606 ),
( 1.716808047611327,3.027372508144424,1.3779999999999997,168.08362369337982 ),
( 1.6716308502266497,3.0358778167575933,1.3739999999999997,170.59233449477355 ),
( 1.6261246634433622,3.042397510200067,1.3699999999999997,173.10104529616726 ),
( 1.5803767154783201,3.046919091242928,1.3659999999999997,175.60975609756096 ),
( 1.5344746979666175,3.0494338927250784,1.3619999999999997,178.1184668989547 ),
( 1.4885065978704817,3.049937094166831,1.3579999999999997,180.62717770034843 ),
( 1.4425605288220835,3.048427731010012,1.3539999999999996,183.13588850174216 ),
( 1.3967245622235331,3.0449086964668632,1.3499999999999996,185.6445993031359 ),
( 1.3510865584278262,3.0393867359742144,1.3459999999999996,188.15331010452962 ),
( 1.3057339983243412,3.031872434263535,1.3419999999999996,190.66202090592336 ),
( 1.2607538156517055,3.022380195071668,1.3379999999999996,193.1707317073171 ),
( 1.2162322303594628,3.010928213531127,1.3339999999999996,195.67944250871082 ),
( 1.1722545833379674,2.997538441292881,1.3299999999999996,198.18815331010455 ),
( 1.1289051728332915,2.98223654444849,1.3259999999999996,200.69686411149826 ),
( 1.0862670928607188,2.9650518543322315,1.3219999999999996,203.20557491289202 ),
( 1.0444220739265635,2.94601731129754,1.3179999999999996,205.71428571428575 ),
( 1.003450326363618,2.925169401575518,1.3139999999999996,208.22299651567945 ),
( 0.9634303865805339,2.9025480873365614,1.3099999999999996,210.7317073170732 ),
( 0.9244389665198576,2.8781967300891473,1.3059999999999996,213.24041811846692 ),
( 0.8865508066132753,2.852162007562633,1.3019999999999996,215.74912891986065 ),
( 0.8498385325159401,2.8244938242333744,1.2979999999999996,218.25783972125438 ),
( 0.8143725158944906,2.7952452156656773,1.2939999999999996,220.7665505226481 ),
( 0.7802207395356099,2.7644722468509473,1.2899999999999996,223.27526132404182 ),
( 0.7474486670336988,2.7322339047399016,1.2859999999999996,225.78397212543555 ),
( 0.7161191173074392,2.698591985173844,1.2819999999999996,228.29268292682926 ),
( 0.6862921441857872,2.6636109744317347,1.2779999999999996,230.801393728223 ),
( 0.6580249212942108,2.62735792562012,1.2739999999999996,233.31010452961675 ),
( 0.6313716324618255,2.589902330142852,1.2699999999999996,235.81881533101046 ),
( 0.6063833678594972,2.551315984496972,1.2659999999999996,238.3275261324042 ),
( 0.5831080260680047,2.5116728526500984,1.2619999999999996,240.83623693379795 ),
( 0.5615902222639817,2.4710489242631137,1.2579999999999996,243.34494773519165 ),
( 0.5418712026996225,2.429522069029907,1.2539999999999996,245.85365853658539 ),
( 0.5239887656400937,2.3871718874133974,1.2499999999999996,248.36236933797912 ),
( 0.5079771889101936,2.3440795580639433,1.2459999999999996,250.87108013937285 ),
( 0.49386716418914034,2.300327682212609,1.2419999999999995,253.37979094076653 ),
( 0.48168573817944216,2.256000125337572,1.2379999999999995,255.88850174216032 ),
( 0.47145626076261493,2.211181856407169,1.2339999999999995,258.397212543554 ),
( 0.46319834024112283,2.1659587850077164,1.2299999999999995,260.9059233449477 ),
( 0.45692780575234115,2.12041759666832,1.2259999999999995,263.4146341463415 ),
( 0.4526566769265856,2.0746455866983275,1.2219999999999995,265.92334494773525 ),
( 0.4503931408473665,2.028730492855917,1.2179999999999995,268.43205574912895 ),
( 0.45014153635803544,1.9827603271685894,1.2139999999999995,270.9407665505227 ),
( 0.45190234574490384,1.9368232072279314,1.2099999999999995,273.4494773519164 ),
( 0.4556721938127748,1.8910071872820167,1.2059999999999995,275.9581881533101 ),
( 0.46144385435466395,1.8454000894492386,1.2019999999999995,278.4668989547039 ),
( 0.46920626400330234,1.800089335377098,1.1979999999999995,280.9756097560976 ),
( 0.4789445434378765,1.7551617786686207,1.1939999999999995,283.4843205574913 ),
( 0.4906400259053496,1.7107035383976381,1.1899999999999995,285.99303135888505 ),
( 0.5042702930016969,1.6667998340320436,1.1859999999999995,288.50174216027875 ),
( 0.5198092176444681,1.6235348220814434,1.1819999999999995,291.01045296167246 ),
( 0.5372270141543022,1.5809914347823424,1.1779999999999995,293.5191637630662 ),
( 0.5564902953494003,1.5392512211300629,1.1739999999999995,296.02787456446 ),
( 0.5775621365435105,1.4983941905621236,1.1699999999999995,298.5365853658537 ),
( 0.6004021463247574,1.4584986595927052,1.1659999999999995,301.0452961672474 ),
( 0.6249665439796377,1.4196411016921848,1.1619999999999995,303.55400696864115 ),
( 0.6512082434137738,1.3818960006995031,1.1579999999999995,306.06271777003485 ),
( 0.6790769434085685,1.34533570804833,1.1539999999999995,308.5714285714286 ),
( 0.7085192240407437,1.310030304080727,1.1499999999999995,311.0801393728223 ),
( 0.7394786490799464,1.276047463714135,1.1459999999999995,313.5888501742161 ),
( 0.7718958741681461,1.2434523267191737,1.1419999999999995,316.0975609756097 ),
( 0.805708760573453,1.2123073728569316,1.1379999999999995,318.60627177700354 ),
( 0.8408524943003101,1.1826723021150713,1.1339999999999995,321.11498257839725 ),
( 0.8772597103277533,1.1546039202723222,1.1299999999999994,323.62369337979095 ),
( 0.91486062173758,1.1281560300107198,1.1259999999999994,326.1324041811847 ),
( 0.9535831534849141,1.1033793277843138,1.1219999999999994,328.6411149825784 ),
( 0.9933530805547578,1.0803213066420172,1.1179999999999994,331.1498257839721 ),
( 1.0340941702396929,1.0590261651908914,1.1139999999999994,333.6585365853659 ),
( 1.0757283282660102,1.0395347228743532,1.1099999999999994,336.16724738675964 ),
( 1.1181757484881798,1.0218843417277084,1.1059999999999994,338.6759581881533 ),
( 1.1613550658647023,1.0061088547609955,1.1019999999999994,341.1846689895471 ),
( 1.2051835124221177,0.9922385011064174,1.0979999999999994,343.6933797909408 ),
( 1.2495770759082245,0.9802998680546691,1.0939999999999994,346.2020905923345 ),
( 1.2944506608303767,0.9703158400912777,1.0899999999999994,348.7108013937283 ),
( 1.3397182515701822,0.9623055550306341,1.0859999999999994,351.2195121951219 ),
( 1.3852930772619474,0.9562843673318069,1.0819999999999994,353.7282229965157 ),
( 1.4310877781188025,0.9522638186664563,1.0779999999999994,356.2369337979094 ),
( 1.4770145728877009,0.9502516157952587,1.0739999999999994,358.74564459930315 ),
( 1.5229854271122996,0.9502516157952587,1.0699999999999994,361.25435540069685 ),
( 1.568912221881197,0.9522638186664563,1.0659999999999994,363.7630662020906 ),
( 1.614706922738053,0.9562843673318071,1.0619999999999994,366.2717770034843 ),
( 1.6602817484298185,0.9623055550306341,1.0579999999999994,368.7804878048781 ),
( 1.705549339169624,0.9703158400912777,1.0539999999999994,371.2891986062718 ),
( 1.750422924091776,0.9802998680546695,1.0499999999999994,373.79790940766554 ),
( 1.794816487577883,0.9922385011064174,1.0459999999999994,376.30662020905925 ),
( 1.8386449341352984,1.0061088547609958,1.0419999999999994,378.815331010453 ),
( 1.8818242515118206,1.0218843417277086,1.0379999999999994,381.3240418118467 ),
( 1.9242716717339903,1.0395347228743534,1.0339999999999994,383.8327526132405 ),
( 1.9659058297603076,1.0590261651908914,1.0299999999999994,386.3414634146342 ),
( 2.0066469194452425,1.0803213066420176,1.0259999999999994,388.85017421602794 ),
( 2.0464168465150863,1.103379327784314,1.0219999999999994,391.35888501742164 ),
( 2.0851393782624204,1.1281560300107203,1.0179999999999993,393.8675958188153 ),
( 2.1227402896722474,1.1546039202723224,1.0139999999999993,396.3763066202091 ),
( 2.1591475056996905,1.1826723021150718,1.0099999999999993,398.88501742160287 ),
( 2.1942912394265477,1.2123073728569318,1.0059999999999993,401.3937282229965 ),
( 2.2281041258318544,1.243452326719174,1.0019999999999993,403.90243902439033 ),
( 2.2605213509200537,1.2760474637141352,0.9979999999999993,406.41114982578404 ),
( 2.291480775959257,1.3100303040807275,0.9939999999999993,408.9198606271777 ),
( 2.3209230565914316,1.3453357080483301,0.9899999999999993,411.4285714285715 ),
( 2.3487917565862264,1.3818960006995034,0.9859999999999993,413.93728222996515 ),
( 2.3750334560203625,1.4196411016921853,0.9819999999999993,416.4459930313589 ),
( 2.3995978536752425,1.458498659592705,0.9779999999999993,418.9547038327526 ),
( 2.42243786345649,1.4983941905621243,0.9739999999999993,421.4634146341464 ),
( 2.4435097046506,1.5392512211300633,0.9699999999999993,423.9721254355401 ),
( 2.4627729858456977,1.5809914347823422,0.9659999999999993,426.48083623693384 ),
( 2.480190782355532,1.623534822081444,0.9619999999999993,428.98954703832754 ),
( 2.4957297069983033,1.666799834032044,0.9579999999999993,431.4982578397213 ),
( 2.5093599740946506,1.7107035383976386,0.9539999999999993,434.006968641115 ),
( 2.5210554565621237,1.755161778668621,0.9499999999999993,436.51567944250877 ),
( 2.5307937359966974,1.8000893353770984,0.9459999999999993,439.0243902439025 ),
( 2.5385561456453365,1.8454000894492393,0.9419999999999993,441.5331010452962 ),
( 2.5443278061872254,1.891007187282017,0.9379999999999993,444.04181184668994 ),
( 2.548097654255096,1.9368232072279319,0.9339999999999993,446.55052264808364 ),
( 2.5498584636419643,1.98276032716859,0.9299999999999993,449.0592334494774 ),
( 2.5496068591526333,2.0287304928559173,0.9259999999999993,451.5679442508711 ),
( 2.5473433230734144,2.074645586698328,0.9219999999999993,454.07665505226487 ),
( 2.543072194247659,2.1204175966683207,0.9179999999999993,456.5853658536585 ),
( 2.5368016597588774,2.165958785007717,0.9139999999999993,459.09407665505233 ),
( 2.528543739237385,2.211181856407169,0.9099999999999993,461.602787456446 ),
( 2.5183142618205574,2.2560001253375725,0.9059999999999993,464.11149825783974 ),
( 2.5061328358108597,2.3003276822126093,0.9019999999999992,466.6202090592335 ),
( 2.4920228110898064,2.344079558063943,0.8979999999999992,469.12891986062715 ),
( 2.476011234359906,2.387171887413398,0.8939999999999992,471.6376306620209 ),
( 2.458128797300377,2.4295220690299075,0.8899999999999992,474.14634146341473 ),
( 2.4384097777360187,2.4710489242631137,0.8859999999999992,476.6550522648084 ),
( 2.416891973931995,2.511672852650099,0.8819999999999992,479.1637630662021 ),
( 2.3936166321405024,2.5513159844969726,0.8779999999999992,481.6724738675959 ),
( 2.3686283675381747,2.5899023301428516,0.8739999999999992,484.18118466898954 ),
( 2.341975078705789,2.6273579256201205,0.8699999999999992,486.6898954703833 ),
( 2.3137078558142123,2.663610974431735,0.8659999999999992,489.198606271777 ),
( 2.283880882692561,2.6985919851738434,0.8619999999999992,491.70731707317077 ),
( 2.2525513329663007,2.732233904739902,0.8579999999999992,494.2160278745645 ),
( 2.2197792604643896,2.764472246850948,0.8539999999999992,496.72473867595824 ),
( 2.1856274841055097,2.795245215665677,0.8499999999999992,499.2334494773519 ),
( 2.1501614674840592,2.8244938242333744,0.8459999999999992,501.7421602787457 ),
( 2.1134491933867237,2.8521620075626335,0.8419999999999992,504.2508710801394 ),
( 2.0755610334801426,2.878196730089147,0.8379999999999992,506.75958188153305 ),
( 2.0365696134194655,2.9025480873365614,0.8339999999999992,509.26829268292687 ),
( 1.996549673636381,2.925169401575519,0.8299999999999992,511.77700348432063 ),
( 1.9555779260734363,2.94601731129754,0.8259999999999992,514.2857142857142 ),
( 1.9137329071392808,2.965051854332232,0.8219999999999992,516.794425087108 ),
( 1.8710948271667076,2.9822365444484906,0.8179999999999992,519.3031358885019 ),
( 1.8277454166620324,2.997538441292881,0.8139999999999992,521.8118466898954 ),
( 1.7837677696405365,3.010928213531127,0.8099999999999992,524.3205574912893 ),
( 1.7392461843482936,3.022380195071668,0.8059999999999992,526.829268292683 ),
( 1.6942660016756586,3.031872434263535,0.8019999999999992,529.3379790940767 ),
( 1.6489134415721731,3.0393867359742144,0.7979999999999992,531.8466898954705 ),
( 1.6032754377764658,3.0449086964668632,0.7939999999999992,534.3554006968642 ),
( 1.5574394711779165,3.048427731010012,0.7899999999999991,536.8641114982579 ),
( 1.5114934021295177,3.049937094166831,0.7859999999999991,539.3728222996516 ),
( 1.4655253020333816,3.049433892725078,0.7819999999999991,541.8815331010454 ),
( 1.4196232845216796,3.046919091242928,0.7779999999999991,544.390243902439 ),
( 1.3738753365566374,3.042397510200067,0.7739999999999991,546.8989547038328 ),
( 1.328369149773349,3.035877816757593,0.7699999999999991,549.4076655052265 ),
( 1.283191952388673,3.027372508144424,0.7659999999999991,551.9163763066202 ),
( 1.238430341998428,3.0168978877020747,0.7619999999999991,554.4250871080139 ),
( 1.194170119583405,3.004474033633708,0.7579999999999991,556.9337979094078 ),
( 1.1504961250423502,2.990124760517374,0.7539999999999991,559.4425087108015 ),
( 1.1074920745671921,2.9738775736571994,0.7499999999999991,561.9512195121952 ),
( 1.0652404001722529,2.955763616360038,0.7459999999999991,564.459930313589 ),
( 1.0238220916850098,2.935817610238641,0.7419999999999991,566.9686411149826 ),
( 0.9833165415013069,2.914077788655774,0.7379999999999991,569.4773519163764 ),
( 0.943801392402602,2.8905858234368633,0.7339999999999991,571.9860627177701 ),
( 0.9053523887269387,2.8653867449916497,0.7299999999999991,574.4947735191638 ),
( 0.868043231178935,2.838528855997955,0.7259999999999991,577.0034843205575 ),
( 0.8319454355571126,2.8100636388130407,0.7219999999999991,579.5121951219512 ),
( 0.7971281956693249,2.780045656789999,0.7179999999999991,582.0209059233449 ),
( 0.7636582506990992,2.7485324496883816,0.7139999999999991,584.5296167247387 ),
( 0.7315997572770936,2.715584423379505,0.7099999999999991,587.0383275261324 ),
( 0.7010141665029027,2.6812647340578764,0.7059999999999991,589.5470383275261 ),
( 0.6719601061529544,2.645639167180689,0.7019999999999991,592.05574912892 ),
( 0.6444932683002607,2.608776011367424,0.6979999999999991,594.5644599303135 ),
( 0.6186663025614525,2.570745927501282,0.6939999999999991,597.0731707317074 ),
( 0.5945287151757365,2.531621813283369,0.6899999999999991,599.5818815331012 ),
( 0.5721267741092014,2.491478663499244,0.685999999999999,602.0905923344948 ),
( 0.5515034203663881,2.4503934262656806,0.681999999999999,604.5993031358885 ),
( 0.5326981856791287,2.4084448555332174,0.677999999999999,607.1080139372823 ),
( 0.5157471167304206,2.36571336012719,0.673999999999999,609.616724738676 ),
( 0.50068270605859,2.322280849616631,0.669999999999999,612.1254355400697 ),
( 0.4875338297742018,2.278230577306494,0.665999999999999,614.6341463414634 ),
( 0.47632569220908527,2.2336469806541306,0.661999999999999,617.1428571428572 ),
( 0.467079777603586,2.188615519415934,0.657999999999999,619.6515679442509 ),
( 0.4598138089246513,2.143222511834412,0.653999999999999,622.1602787456446 ),
( 0.45454171389368403,2.0975549691796593,0.649999999999999,624.6689895470383 ),
( 0.45127359828928526,2.0517004289624063,0.645999999999999,627.1777003484322 ),
( 0.45001572657606603,2.0057467871383627,0.641999999999999,629.6864111498259 ),
( 0.45077050989664946,1.9597821296254632,0.637999999999999,632.1951219512194 ),
( 0.4535365014498898,1.9138945634569815,0.633999999999999,634.7038327526133 ),
( 0.45830839926416367,1.8681720478941921,0.629999999999999,637.2125435540071 ),
( 0.4650770563604161,1.8227022258222667,0.625999999999999,639.7212543554007 ),
( 0.4738294982854847,1.7775722557526148,0.621999999999999,642.2299651567945 ),
( 0.4845489479820897,1.7328686447537107,0.617999999999999,644.7386759581882 ),
( 0.4972148579478173,1.6886770826306166,0.613999999999999,647.2473867595819 ),
( 0.5118029496214604,1.6450822776710716,0.609999999999999,649.7560975609757 ),
( 0.5282852599212051,1.6021677942730124,0.605999999999999,652.2648083623694 ),
( 0.5466301948454706,1.5600158927647332,0.601999999999999,654.7735191637631 ),
( 0.5668025900336536,1.5187073717247448,0.597999999999999,657.2822299651568 ),
( 0.5887637781706829,1.4783214131035933,0.593999999999999,659.7909407665506 ),
( 0.6124716631061954,1.4389354304444832,0.589999999999999,662.2996515679442 ),
( 0.6378808005462504,1.4006249204936645,0.585999999999999,664.808362369338 ),
( 0.6649424851629029,1.3634633184850293,0.581999999999999,667.3170731707318 ),
( 0.693604843954674,1.3275218573762904,0.577999999999999,669.8257839721254 ),
( 0.723812935678956,1.2928694313065798,0.573999999999999,672.3344947735193 ),
( 0.7555088561657434,1.2595724635372072,0.569999999999999,674.843205574913 ),
( 0.7886318493108398,1.227694779128689,0.565999999999999,677.3519163763066 ),
( 0.8231184235357788,1.197297482598123,0.561999999999999,679.8606271777005 ),
( 0.8589024734912032,1.1684388407914288,0.5579999999999989,682.3693379790942 ),
( 0.8959154067704482,1.1411741711949466,0.5539999999999989,684.8780487804878 ),
( 0.9340862753904229,1.1155557359004944,0.5499999999999989,687.3867595818816 ),
( 0.9733419117877464,1.0916326414271513,0.5459999999999989,689.8954703832754 ),
( 1.0136070690694878,1.0694507445917623,0.5419999999999989,692.404181184669 ),
( 1.0548045652496514,1.0490525646086173,0.5379999999999989,694.9128919860628 ),
( 1.0968554311949208,1.0304772015867978,0.5339999999999989,697.4216027874565 ),
( 1.139679061996094,1.0137602615814014,0.5299999999999989,699.9303135888501 ),
( 1.1831933714750487,0.9989337883423226,0.5259999999999989,702.4390243902438 ),
( 1.2273149495310496,0.9860262018914168,0.5219999999999989,704.9477351916378 ),
( 1.2719592220248226,0.9750622440457781,0.5179999999999989,707.4564459930314 ),
( 1.3170406128939112,0.9660629309915596,0.5139999999999989,709.9651567944251 ),
( 1.3624727081885413,0.9590455129992446,0.5099999999999989,712.4738675958188 ),
( 1.4081684217136128,0.9540234413575841,0.5059999999999989,714.9825783972126 ),
( 1.4540401619592538,0.95100634258959,0.5019999999999989,717.4912891986063 ),
( 1.4999999999999996,0.95,0.4979999999999989,720.0 ),


( 1.5,0.95,0.47999999999999887,720 ),
( 1.5,0.95,0.44999999999999885,720 ),
( 1.5,0.95,0.4199999999999988,720 ),
( 1.5,0.95,0.3899999999999988,720 ),
( 1.5,0.95,0.35999999999999877,720 ),
( 1.5,0.95,0.32999999999999874,720 ),
( 1.5,0.95,0.2999999999999987,720 ),
( 1.5,0.95,0.2699999999999987,720 ),
( 1.5,0.95,0.2399999999999987,720 ),
( 1.5,0.95,0.2099999999999987,720 ),
( 1.5,0.95,0.1799999999999987,720 ),
( 1.5,0.95,0.1499999999999987,720 ),
( 1.5,0.95,0.11999999999999869,720 ),
( 1.5,0.95,0.08999999999999869,720 ),
( 1.5,0.95,0.05999999999999869,720 ),
( 1.5,0.95,0.029999999999998694,720 ),
( 1.5,0.95,0.0,720 ),

    
    ]
   


#URI = 'radio://0/80/2M'
URI = 'usb://0'

# Only output errors from the logging framework
logging.basicConfig(level=logging.ERROR)


#--------------------------------------------------------------------


cap = cv2.VideoCapture(1)
cap.set(cv2.CAP_PROP_FRAME_WIDTH, 640)
cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 480)

marker_gap = 11
end_time=0
start_time=0

while_flag=True;
while_counter=0;

x_pose_setpoint=0;
y_pose_setpoint=0;
z_pose_setpoint=0;



x_ekf=0;
y_ekf=0;
z_ekf=0;





####---------------------- CALIBRATION ---------------------------
# termination criteria for the iterative algorithm
criteria = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 20, 0.001)

# prepare object points, like (0,0,0), (1,0,0), (2,0,0) ....,(6,5,0)
# checkerboard of size (7 x 6) is used
objp = np.zeros((7*9,3), np.float32)
objp[:,:2] = np.mgrid[0:9,0:7].T.reshape(-1,2)
objp *= 0.20

# arrays to store object points and image points from all the images.
objpoints = [] # 3d point in real world space
imgpoints = [] # 2d points in image plane.

# iterating through all calibration images
# in the folder
images = glob.glob('*.jpg')

for fname in images:
    img = cv2.imread(fname)
    gray = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)

    # find the chess board (calibration pattern) corners
    ret, corners = cv2.findChessboardCorners(gray, (9,7),None)

    # if calibration pattern is found, add object points,
    # image points (after refining them)
    if ret == True:
        objpoints.append(objp)

        # Refine the corners of the detected corners
        corners2 = cv2.cornerSubPix(gray,corners,(11,11),(-1,-1),criteria)
        imgpoints.append(corners2)

        # Draw and display the corners
        img = cv2.drawChessboardCorners(img, (9,7), corners2,ret)
#         cv2.imshow('img',img)
        cv2.waitKey(WAIT_TIME)


ret, mtx, dist, rvecs, tvecs = cv2.calibrateCamera(objpoints, imgpoints, gray.shape[::-1],None,None)
cv2.destroyAllWindows()

#-------------------------------------------------------------------
class Uploader:
    def __init__(self):
        self._is_done = False

    def upload(self, trajectory_mem):
        print('Uploading data')
        trajectory_mem.write_data(self._upload_done)

        while not self._is_done:
            time.sleep(0.2)

    def _upload_done(self, mem, addr):
        print('Data uploaded')
        self._is_done = True

def wait_for_position_estimator(scf):
    print('Waiting for estimator to find position...')

    log_config = LogConfig(name='Kalman Variance', period_in_ms=100)
    log_config.add_variable('kalman.varPX', 'float')
    log_config.add_variable('kalman.varPY', 'float')
    log_config.add_variable('kalman.varPZ', 'float')

    var_y_history = [1000] * 10
    var_x_history = [1000] * 10
    var_z_history = [1000] * 10

    threshold = 1.0

    with SyncLogger(scf, log_config) as logger:
        for log_entry in logger:
            data = log_entry[1]

            var_x_history.append(data['kalman.varPX'])
            var_x_history.pop(0)
            var_y_history.append(data['kalman.varPY'])
            var_y_history.pop(0)
            var_z_history.append(data['kalman.varPZ'])
            var_z_history.pop(0)

            min_x = min(var_x_history)
            max_x = max(var_x_history)
            min_y = min(var_y_history)
            max_y = max(var_y_history)
            min_z = min(var_z_history)
            max_z = max(var_z_history)

            # print("{} {} {}".
            #       format(max_x - min_x, max_y - min_y, max_z - min_z))
            
            #if time.time() > endTime:
            #            break

            if (max_x - min_x) < threshold and (
                    max_y - min_y) < threshold and (
                    max_z - min_z) < threshold:
                break




def _sqrt(a):
    """
    There might be rounding errors making 'a' slightly negative.
    Make sure we don't throw an exception.
    """
    if a < 0.0:
        return 0.0
    return math.sqrt(a)

def send_extpose_rot_matrix(cf, x, y, z, rot):
    """
    Send the current Crazyflie X, Y, Z position and attitude as a (3x3)
    rotaton matrix. This is going to be forwarded to the Crazyflie's
    position estimator.
    """
    #qw = _sqrt(1 + rot[0][0] + rot[1][1] + rot[2][2]) / 2
    #qx = _sqrt(1 + rot[0][0] - rot[1][1] - rot[2][2]) / 2
    #qy = _sqrt(1 - rot[0][0] + rot[1][1] - rot[2][2]) / 2
    #qz = _sqrt(1 - rot[0][0] - rot[1][1] + rot[2][2]) / 2

    # Normalize the quaternion
    #ql = math.sqrt(qx ** 2 + qy ** 2 + qz ** 2 + qw ** 2)

    #cf.extpos.send_extpose(x, y, z, qx / ql, qy / ql, qz / ql, qw / ql)
    cf.extpos.send_extpose(x, y, z, 0, 0, 0, 0)



def reset_estimator(cf):
    cf.param.set_value('kalman.resetEstimation', '1')
    time.sleep(0.1)
    cf.param.set_value('kalman.resetEstimation', '0')
    
    time.sleep(1)
    wait_for_position_estimator(cf)


def activate_kalman_estimator(cf):
    cf.param.set_value('stabilizer.estimator', '2')

    # Set the std deviation for the quaternion data pushed into the
    # kalman filter. The default value seems to be a bit too low.
    
    cf.param.set_value('locSrv.extPosStdDev', 0.05)

    cf.param.set_value('locSrv.extQuatStdDev', 0.06)


def activate_high_level_commander(cf):
    cf.param.set_value('commander.enHighLevel', '1')


def activate_mellinger_controller(cf):
    #cf.param.set_value('stabilizer.controller', '2')
    cf.param.set_value('stabilizer.controller', '1')

    
    

def upload_trajectory(cf, trajectory_id, trajectory):
    trajectory_mem = cf.mem.get_mems(MemoryElement.TYPE_TRAJ)[0]

    total_duration = 0
    for row in trajectory:
        duration = row[0]
        x = Poly4D.Poly(row[1:9])
        y = Poly4D.Poly(row[9:17])
        z = Poly4D.Poly(row[17:25])
        yaw = Poly4D.Poly(row[25:33])
        trajectory_mem.poly4Ds.append(Poly4D(duration, x, y, z, yaw))
        total_duration += duration

    Uploader().upload(trajectory_mem)
    cf.high_level_commander.define_trajectory(trajectory_id, 0,
                                              len(trajectory_mem.poly4Ds))
    return total_duration




def position_callback(timestamp, data, logconf):
    global x_ekf
    global y_ekf
    global z_ekf

    x = data['kalman.stateX']
    y = data['kalman.stateY']
    z = data['kalman.stateZ']
    #print('pos: ({}, {}, {})'.format(x, y, z))
    x_ekf = x;
    y_ekf = y;
    z_ekf = z;
    


def start_position_printing(cf):
    log_conf = LogConfig(name='Position', period_in_ms=300)
    log_conf.add_variable('kalman.stateX', 'float')
    log_conf.add_variable('kalman.stateY', 'float')
    log_conf.add_variable('kalman.stateZ', 'float')

    cf.log.add_config(log_conf)
    log_conf.data_received_cb.add_callback(position_callback)
    log_conf.start()
    
def run_sequence(cf, trajectory_id, duration):
    commander = cf.high_level_commander

    commander.takeoff(0.5, 1.0)
    time.sleep(3.0)
    relative = False
    commander.start_trajectory(trajectory_id, 1.0, relative)
    time.sleep(duration)
    commander.land(0.0, 1.0)
    time.sleep(2)
    commander.stop()    
    
def m_run_sequence(scf, sequence):
    cf = scf.cf

    for position in sequence:
        #print('Setting position {}'.format(position))
        for i in range(4):
            #print("Sending setpoint")
            #print(position[0],position[1],position[2],position[3])

            cf.commander.send_position_setpoint(position[1],
                                                position[0],
                                                position[2],
                                                -position[3])
            time.sleep(0.085)
            #print("Sent setpoint")

            

    cf.commander.send_stop_setpoint()
    # Make sure that the last packet leaves before the link is closed
    # since the message queue is not flushed before closing
    time.sleep(0.1)
    
    
def localization(cf):
###------------------ ARUCO TRACKER ---------------------------
    
    i_marker_counter_loop=0
    final_roll_point_sum=0
    final_height_point_sum=0
    final_alt_point_sum=0
    y_point  =  10.0
    x_point  =  20.0
    z_point  =  10.0
    d=10.0;
    d1=0.95;
    d2=1.5;
    d3=0.0;
    end_time=0
    start_time=0

    


    while True:
        ret, frame = cap.read()
        # operations on the frame
        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
        # lists of ids and the corners belonging to each id
        corners, ids, rejectedImgPoints = aruco.detectMarkers(gray, aruco_dict, parameters=parameters)
        # check if the ids list is not empty
        # if no check is added the code will crash
        if np.all(ids != None):

            # estimate pose of each marker and return the values
            # rvet and tvec-different from camera coefficients
            rvec, tvec ,_ = aruco.estimatePoseSingleMarkers(corners, 0.055, mtx, dist)
            
            max_markers=len(ids)
            #print(max_markers)
            if max_markers > 4 :
                    max_markers = 4;
            for i_marker_counter_loop in range (0, max_markers):
                
                detected_id=(int)(ids[i_marker_counter_loop][0])
                
                if detected_id< 1024 and detected_id>-1 :
                    i=i_marker_counter_loop
                    rotM = np.zeros(shape=(3,3))
                    cv2.Rodrigues(rvec[i], rotM, jacobian = 0)
                    ypr = cv2.RQDecomp3x3(rotM)
                    yaw_raw=ypr[0][2] #+ 180
                    roll_point_t    = (int)(100*((tvec[i][0])[0])) 
                    height_point_t  = (int)(100*((tvec[i][0])[1]))
                    alt_point       = (int)(100*((tvec[i][0])[2]))
                    
                    col = detected_id%28
                    row = detected_id/28
                                    
                    roll_point    = (int)(roll_point_t*math.cos(3.14*ypr[0][2]/180) + height_point_t*math.sin(3.14*ypr[0][2]/180))
                    height_point  = (int)(-roll_point_t*math.sin(3.14*ypr[0][2]/180) + height_point_t*math.cos(3.14*ypr[0][2]/180))
                                                
                    final_roll_point_sum   = final_roll_point_sum   + (int)(col*marker_gap) - roll_point   # x[detected_id]
                    final_height_point_sum = final_height_point_sum + (int)(row*marker_gap) - height_point #y[detected_id]
                    final_alt_point_sum    = final_alt_point_sum    + alt_point
   
            y_point_  =  float(final_height_point_sum/max_markers)
            x_point_  =  float(final_roll_point_sum  /max_markers)
            z_point  =  float(final_alt_point_sum/max_markers)
            
            final_height_point_sum = 0;
            final_roll_point_sum   = 0;
            final_alt_point_sum    = 0;
            
            x_point = 32*marker_gap - y_point_
            y_point = 28*marker_gap - x_point_

            
            #print("x: ",x_point, "   y: ",y_point ,"z: ",z_point, "   yaw:  ",ypr[0][2]  )
            #if float(1.15*(z_point/200)) > 40: 
            d1=float(x_point/100)
            d2=float(y_point/100)
            d3=float(1.15*(z_point/200))
            d3 = z_pose_setpoint;
            
            #print("x: ",d1, "   y: ",d2 ,"z: ",d3 , "Yaw", ypr[0][2]   )
            print(d1,",",d2 ,",",d3 , ",", ypr[0][2],",",y_pose_setpoint,",",x_pose_setpoint,",",z_pose_setpoint,",",y_ekf,",",x_ekf,",",z_ekf   )



        else:
            print("no ids")
            #d1=float(0.0)
            #d2=float(0.0)
            #d3=float(0.0)
            # code to show 'No Ids' when no markers are found
            #cv2.putText(frame, "No Ids", (0,64), font, 1, (0,255,0),2,cv2.LINE_AA)
            
        #send_extpose_rot_matrix(cf, x_point, y_point, z_point, 0.0)
        cf.extpos.send_extpos(float(d1),float(d2),float(d3))
        #time.sleep(0.1)

        
        #end_time = time.time()
        #DT=end_time - start_time
        #print("t:  ", (int)(1000*(DT)))
        #start_time = time.time()

        
        
        #cf.extpos.send_extpos(float(x_point), float(y_point), float(z_point))



        #time.sleep(0.1)



        # display the resulting frame
        #cv2.imshow('frame',frame)
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break


    

if __name__ == '__main__':
    # Initialize the low-level drivers (don't list the debug drivers)
    cflib.crtp.init_drivers(enable_debug_driver=False)
    # set dictionary size depending on the aruco marker selected
    aruco_dict = aruco.Dictionary_get(aruco.DICT_ARUCO_ORIGINAL)
    # detector parameters can be set here (List of detection parameters[3])
    parameters = aruco.DetectorParameters_create()
    parameters.adaptiveThreshConstant = 10
    # font for displaying text (below)
    font = cv2.FONT_HERSHEY_SIMPLEX
    


    with SyncCrazyflie(URI, cf=Crazyflie(rw_cache='./cache')) as scf:
        cf = scf.cf
        trajectory_id = 1
        activate_kalman_estimator(cf)
        activate_high_level_commander(cf)
        #activate_mellinger_controller(cf)
        #start_position_printing(cf)
        #duration = upload_trajectory(cf, trajectory_id, figure8)
        #print('The sequence is {:.1f} seconds long'.format(duration))
        reset_estimator(cf)
        t1 = threading.Thread(target=localization, args=(cf,))
        t1.setDaemon(True)
        t3 = threading.Thread(target=start_position_printing,args=(cf,))
        
        
        #t2 = threading.Thread(target=m_run_sequence, args=(scf,circle_trajectory_yaw4,))
        #t2.setDaemon(True)
        #t3.setDaemon(True)

        
        t1.start()
        t3.start()
        
        time.sleep(2)

        #run_sequence(cf, trajectory_id, duration)
        #m_run_sequence(scf, takeff_landing)
        #t2.start()
        
#


        for position in circle_trajectory_yaw4:
            #print('Setting position {}'.format(position))
            for i in range(60):
                #print("Sending setpoint")
                #print(i)
                x_pose_setpoint = position[0];
                y_pose_setpoint = position[1];
                z_pose_setpoint = position[2];


                

                cf.commander.send_position_setpoint(position[1],
                                                    position[0],
                                                    position[2],
                                                    -position[3])
                
                
                time.sleep(0.004)
                #print("Sent setpoint")

                

        cf.commander.send_stop_setpoint()


        while True:

            pass
        






        # We take off when the commander is created
        #with MotionCommander(scf) as mc:

 
